{"version":3,"sources":["components/boardFrame.jsx","components/cell.jsx","components/row.jsx","components/board.jsx","components/ships.jsx","components/menu.jsx","game/shipFactory.js","game/gameBoard.js","game/player.js","game/computer.js","App.js","serviceWorker.js","index.js"],"names":["BoardFrame","className","Cell","props","dataX","dataY","handleAttack","item","boardType","type","tabIndex","data-x","data-y","onClick","e","Row","items","cells","map","i","key","Board","boards","board","id","Ships","Menu","playerName","computerName","handleInput","handleNewBoard","handleStartGame","htmlFor","placeholder","name","value","onChange","shipFactory","length","hit","sunk","getLength","isHit","isSunk","hitValue","gameBoard","arr","push","j","boardFactory","ships","placeShip","x","y","orientation","splice","checkPlacementLength","checkPlacementFree","receiveAttack","spot","find","s","createPlayer","player","playerBoard","playerShips","createCoordinates","Math","floor","random","randomPlacement","hasLost","every","ship","checkCell","playerCells","document","getElementsByClassName","dataset","toString","findPlayerCell","classList","contains","add","remove","generatePlacement","newBoard","createComputer","computer","computerBoard","computerShips","attacks","checkAttacks","attack","App","target","setState","start","checkEndGame","victory","state","computerX","computerY","this","Fragment","window","location","reload","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11782278.chunk.js","sourcesContent":["import React from 'react';\n\nconst BoardFrame = () => {\n  return (\n    <>\n      <div className='frameX'>\n        <div>0</div>\n        <div>1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n        <div>5</div>\n        <div>6</div>\n        <div>7</div>\n        <div>8</div>\n        <div>9</div>\n      </div>\n      <div className='frameY'>\n        <div>A</div>\n        <div>B</div>\n        <div>C</div>\n        <div>D</div>\n        <div>E</div>\n        <div>F</div>\n        <div>G</div>\n        <div>H</div>\n        <div>I</div>\n        <div>J</div>\n      </div>\n    </>\n  );\n};\n\nexport default BoardFrame;\n","import React from 'react';\n\nconst Cell = (props) => {\n  const { dataX, dataY, handleAttack, item, boardType } = props;\n\n  return (\n    <button\n      className={`cell ${\n        boardType === 'playerBoard' ? `playerCell playerCell${item}` : ''\n      } ${\n        boardType === 'computerBoard' && typeof item === 'number'\n          ? 'shipCell'\n          : item\n      }`}\n      type='button'\n      tabIndex={0}\n      data-x={dataX}\n      data-y={dataY}\n      onClick={(e) => handleAttack(e)}\n    >\n      {item}\n    </button>\n  );\n};\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './cell';\n\nconst Row = (props) => {\n  const { items, dataY, handleAttack, boardType } = props;\n  const cells = items.map((item, i) => (\n    <Cell\n      item={item}\n      key={i}\n      dataX={i}\n      dataY={dataY}\n      handleAttack={handleAttack}\n      boardType={boardType}\n    />\n  ));\n  return <div className='row'>{cells}</div>;\n};\n\nexport default Row;\n","import React from 'react';\nimport BoardFrame from './boardFrame';\nimport Row from './row';\n\nconst Board = (props) => {\n  const { item, boardType, handleAttack } = props;\n  const boards = item.map((board, i) => (\n    <Row\n      items={board}\n      key={i}\n      dataY={i}\n      handleAttack={handleAttack}\n      boardType={boardType}\n    />\n  ));\n  return (\n    <div className='gameBoards'>\n      <BoardFrame />\n      <div className='board' id={boardType}>\n        {boards}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React from 'react';\n\nconst Ships = (props) => {\n  return <div id={props.id} className={props.className} />;\n};\n\nexport default Ships;\n","import React from 'react';\n\nconst Menu = (props) => {\n  const {\n    playerName,\n    computerName,\n    handleInput,\n    handleNewBoard,\n    handleStartGame,\n    boards,\n  } = props;\n  return (\n    <div className='menu'>\n      <label htmlFor='player-name'>\n        Player Name\n        <input\n          type='text'\n          placeholder='Player Name'\n          id='player-name'\n          name='playerName'\n          value={playerName}\n          onChange={(e) => handleInput(e)}\n        />\n      </label>\n      <label htmlFor='computer-name'>\n        Computer Name\n        <input\n          type='text'\n          placeholder='Computer Name'\n          id='computer-name'\n          name='computerName'\n          value={computerName}\n          onChange={(e) => handleInput(e)}\n        />\n      </label>\n      <button\n        onClick={() => {\n          handleNewBoard();\n        }}\n        type='button'\n        id='newBoardBtn'\n      >\n        New Board\n      </button>\n      {boards && (\n        <button\n          type='button'\n          id='startGameBtn'\n          onClick={() => handleStartGame()}\n        >\n          Start Game\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Menu;\n","const shipFactory = (length) => {\n  let hit = 0;\n  let sunk = 'notSunk';\n  const getLength = () => length;\n  const isHit = () => {\n    hit += 1;\n    if (length - hit === 0) {\n      sunk = 'sunk';\n    }\n  };\n\n  const hitValue = () => {\n    return hit;\n  };\n  const isSunk = () => {\n    return sunk;\n  };\n\n  return { getLength, isHit, isSunk, hitValue };\n};\n\nexport default shipFactory;\n","import shipFactory from './shipFactory';\n\nconst boardFactory = () => {\n  const boardGameDimension = 10;\n  const arr = [];\n  for (let i = 0; i < boardGameDimension; i += 1) {\n    arr.push([]);\n    for (let j = 0; j < boardGameDimension; j += 1) {\n      arr[i].push('');\n    }\n  }\n  return arr;\n};\n\nconst gameBoard = () => {\n  const board = boardFactory();\n  const ships = [];\n\n  const checkPlacementLength = (x, y, length) => {\n    if (x + length <= 10 && y + length <= 10) {\n      return true;\n    }\n    return false;\n  };\n\n  const checkPlacementFree = (x, y, orientation, length) => {\n    if (orientation) {\n      for (let i = 0; i < length; i += 1) {\n        if (board[y][x + i] !== '') {\n          return false;\n        }\n      }\n    } else if (!orientation) {\n      for (let i = 0; i < length; i += 1) {\n        if (board[y + i][x] !== '') {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  const placeShip = (x, y, orientation, length) => {\n    ships.push(shipFactory(length));\n    if (orientation) {\n      for (let i = 0; i < length; i += 1) {\n        board[y].splice(x + i, 1, length);\n      }\n    } else if (!orientation) {\n      for (let i = 0; i < length; i += 1) {\n        board[y + i].splice(x, 1, length);\n      }\n    }\n  };\n\n  const receiveAttack = (x, y) => {\n    const spot = board[y][x];\n    if (spot !== '' && spot !== 'X') {\n      const ship = ships.find((s) => s.getLength() === spot);\n      ship.isHit();\n    } else if (spot === '') {\n      board[y].splice(x, 1, 'X');\n    }\n  };\n\n  return {\n    placeShip,\n    board,\n    checkPlacementLength,\n    checkPlacementFree,\n    receiveAttack,\n    ships,\n  };\n};\n\nexport { boardFactory, gameBoard };\n","import { gameBoard } from './gameBoard';\n\nfunction createPlayer() {\n  const player = gameBoard();\n  const playerBoard = player.board;\n  const playerShips = player.ships;\n\n  function createCoordinates() {\n    const x = Math.floor(Math.random() * 10);\n    const y = Math.floor(Math.random() * 10);\n    return [x, y];\n  }\n\n  function randomPlacement(x, y, orientation, length) {\n    if (\n      player.checkPlacementLength(x, y, length) &&\n      player.checkPlacementFree(x, y, orientation, length)\n    ) {\n      player.placeShip(x, y, orientation, length);\n      return true;\n    }\n    return false;\n  }\n\n  function generatePlacement() {\n    for (let i = 1; i < 6; i += 1) {\n      let [x, y] = createCoordinates();\n      let orientation = Math.random() >= 0.5;\n      while (true) {\n        if (randomPlacement(x, y, orientation, i)) {\n          break;\n        } else {\n          [x, y] = createCoordinates();\n          orientation = Math.random() >= 0.5;\n        }\n      }\n    }\n  }\n\n  function newBoard() {\n    playerShips.length = 0;\n    for (let i = 0; i < playerBoard.length; i += 1) {\n      for (let j = 0; j < playerBoard.length; j += 1) {\n        playerBoard[i].splice(j, 1, '');\n      }\n    }\n  }\n\n  function hasLost() {\n    return player.ships.every((ship) => ship.isSunk() === 'sunk');\n  }\n\n  function receiveAttack(x, y) {\n    player.receiveAttack(x, y);\n  }\n\n  function findPlayerCell(x, y) {\n    const playerCells = document.getElementsByClassName('playerCell');\n    let spot = '';\n    for (let i = 0; i < playerCells.length; i += 1) {\n      if (\n        playerCells[i].dataset.x === x.toString() &&\n        playerCells[i].dataset.y === y.toString()\n      ) {\n        spot = playerCells[i];\n        return spot;\n      }\n    }\n    return false;\n  }\n\n  function checkCell(x, y) {\n    const spot = findPlayerCell(x, y);\n    for (let i = 1; i < 6; i += 1) {\n      if (spot.classList.contains(`playerCell${i}`)) {\n        spot.classList.add('hitCell');\n        spot.classList.remove(`playerCell${i}`);\n      }\n    }\n  }\n\n  return {\n    hasLost,\n    receiveAttack,\n    checkCell,\n    playerBoard,\n    generatePlacement,\n    newBoard,\n    playerShips,\n  };\n}\n\nexport default createPlayer;\n","import { gameBoard } from './gameBoard';\n\nfunction createComputer() {\n  const computer = gameBoard();\n  const computerBoard = computer.board;\n  const computerShips = computer.ships;\n  const attacks = [];\n\n  function createCoordinates() {\n    const x = Math.floor(Math.random() * 10);\n    const y = Math.floor(Math.random() * 10);\n    return [x, y];\n  }\n\n  function checkAttacks(x, y) {\n    for (let i = 0; i < attacks.length; i += 1) {\n      if (attacks[i][0] === x && attacks[i][1] === y) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function randomPlacement(x, y, orientation, length) {\n    if (\n      computer.checkPlacementLength(x, y, length) &&\n      computer.checkPlacementFree(x, y, orientation, length)\n    ) {\n      computer.placeShip(x, y, orientation, length);\n      return true;\n    }\n    return false;\n  }\n\n  function generatePlacement() {\n    for (let i = 1; i < 6; i += 1) {\n      let [x, y] = createCoordinates();\n      let orientation = Math.random() >= 0.5;\n      while (true) {\n        if (randomPlacement(x, y, orientation, i)) {\n          break;\n        } else {\n          [x, y] = createCoordinates();\n          orientation = Math.random() >= 0.5;\n        }\n      }\n    }\n  }\n\n  function hasLost() {\n    return computerShips.every((ship) => ship.isSunk() === 'sunk');\n  }\n\n  function attack() {\n    let [x, y] = createCoordinates();\n    while (true) {\n      if (checkAttacks(x, y)) {\n        attacks.push([x, y]);\n        return [x, y];\n      }\n      [x, y] = createCoordinates();\n    }\n  }\n\n  function receiveAttack(x, y) {\n    computer.receiveAttack(x, y);\n  }\n\n  return {\n    hasLost,\n    attack,\n    computerBoard,\n    computerShips,\n    generatePlacement,\n    receiveAttack,\n  };\n}\n\nexport default createComputer;\n","import React from 'react';\nimport './App.css';\nimport Board from './components/board';\nimport Ships from './components/ships';\nimport Menu from './components/menu';\nimport createPlayer from './game/player';\nimport createComputer from './game/computer';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.player = createPlayer();\n    this.computer = createComputer();\n    this.state = {\n      start: false,\n      victory: false,\n      boards: false,\n      playerName: '',\n      playerBoard: this.player.playerBoard,\n      playerShips: [],\n      computerName: '',\n      computerBoard: [],\n      computerShips: [],\n    };\n  }\n\n  componentDidMount() {\n    this.computer.generatePlacement();\n    this.setState({\n      computerBoard: this.computer.computerBoard,\n      computerShips: this.computer.computerShips,\n    });\n  }\n\n  handleInput = (e) => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleNewBoard = () => {\n    this.player.newBoard();\n    this.player.generatePlacement();\n    this.setState({\n      boards: true,\n      playerBoard: this.player.playerBoard,\n      playerShips: this.player.playerShips,\n    });\n  };\n\n  handleStartGame = () => {\n    this.setState({ start: true });\n  };\n\n  checkEndGame = () => {\n    if (this.player.hasLost()) {\n      this.setState({ victory: this.state.computerName });\n    } else if (this.computer.hasLost()) {\n      this.setState({ victory: this.state.playerName });\n    }\n  };\n\n  handleAttack = (e) => {\n    const x = e.target.dataset.x;\n    const y = e.target.dataset.y;\n    if (e.target.classList.contains('shipCell')) {\n      e.target.classList.add('hitCell');\n    }\n    this.computer.receiveAttack(x, y);\n    this.checkEndGame();\n    let [computerX, computerY] = this.computer.attack();\n    this.player.receiveAttack(computerX, computerY);\n    this.player.checkCell(computerX, computerY);\n    this.checkEndGame();\n    this.setState({\n      playerBoard: this.player.playerBoard,\n      playerShips: this.player.playerShips,\n      computerBoard: this.computer.computerBoard,\n      computerShips: this.computer.computerShips,\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <h1 id='header'>Battleship</h1>\n        {!this.state.start && (\n          <Menu\n            handleNewBoard={this.handleNewBoard}\n            handleStartGame={this.handleStartGame}\n            handleInput={this.handleInput}\n            playerName={this.state.playerName}\n            computerName={this.state.computerName}\n            boards={this.state.boards}\n          />\n        )}\n        {this.state.victory !== false && (\n          <div className='endGame'>\n            <h1>{this.state.victory} has won!</h1>\n            <button\n              type='button'\n              id='newGameBtn'\n              onClick={() => window.location.reload(false)}\n            >\n              New Game\n            </button>\n          </div>\n        )}\n        <div className='mainArea'>\n          <div>\n            <h2 className='names'>{this.state.playerName}</h2>\n            <Board item={this.state.playerBoard} boardType='playerBoard' />\n            <div className='ships'>\n              {this.state.playerShips.map((ship) => (\n                <Ships\n                  key={ship.getLength()}\n                  id={ship.getLength()}\n                  className={ship.isSunk()}\n                />\n              ))}\n            </div>\n          </div>\n          <div>\n            <h2 className='names'>{this.state.computerName}</h2>\n            <Board\n              item={this.state.computerBoard}\n              handleAttack={this.handleAttack}\n              boardType='computerBoard'\n            />\n            <div className='ships'>\n              {this.state.computerShips.map((ship) => (\n                <Ships\n                  key={ship.getLength()}\n                  id={ship.getLength()}\n                  className={ship.isSunk()}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}